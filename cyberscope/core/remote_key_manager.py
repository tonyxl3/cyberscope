#!/usr/bin/env python3
"""
Gestor de Claves SSH Remotas para CyberScope
Automatiza la generaci√≥n y distribuci√≥n de claves SSH para an√°lisis forense remoto
"""

import os
import subprocess
import logging
from pathlib import Path

logger = logging.getLogger(__name__)

def ensure_ssh_key_and_push(hostname: str, username: str, password: str, port: int = 22) -> bool:
    """
    Asegura que existe una clave SSH y la copia autom√°ticamente al host remoto.
    
    Esta funci√≥n:
    1. Verifica si existe /root/.ssh/id_rsa
    2. Si no existe, genera un nuevo par de claves SSH RSA de 4096 bits
    3. Usa sshpass para copiar autom√°ticamente la clave p√∫blica al servidor remoto
    4. Configura las opciones SSH para evitar verificaciones de host
    
    Args:
        hostname (str): IP o nombre de dominio del servidor remoto
        username (str): Usuario SSH del servidor remoto
        password (str): Contrase√±a SSH del usuario
        port (int): Puerto SSH del servidor remoto (por defecto 22)
        
    Returns:
        bool: True si la clave fue copiada exitosamente, False en caso de error
        
    Raises:
        ValueError: Si alg√∫n par√°metro requerido est√° vac√≠o
    """
    
    # Validar par√°metros de entrada
    if not hostname or not hostname.strip():
        logger.error("Hostname no puede estar vac√≠o")
        raise ValueError("Hostname es requerido")
    
    if not username or not username.strip():
        logger.error("Username no puede estar vac√≠o")
        raise ValueError("Username es requerido")
    
    if not password or not password.strip():
        logger.error("Password no puede estar vac√≠o")
        raise ValueError("Password es requerido")
    
    if not isinstance(port, int) or port < 1 or port > 65535:
        logger.error(f"Puerto inv√°lido: {port}")
        raise ValueError("Puerto debe ser un entero entre 1 y 65535")
    
    # Limpiar par√°metros
    hostname = hostname.strip()
    username = username.strip()
    password = password.strip()
    
    logger.info(f"Iniciando configuraci√≥n de clave SSH para {username}@{hostname}:{port}")
    
    try:
        # Paso 1: Verificar y crear directorio .ssh si no existe
        ssh_dir = Path("/root/.ssh")
        ssh_dir.mkdir(mode=0o700, exist_ok=True)
        logger.debug(f"Directorio SSH asegurado: {ssh_dir}")
        
        # Paso 2: Verificar si existe la clave privada
        private_key_path = ssh_dir / "id_rsa"
        public_key_path = ssh_dir / "id_rsa.pub"
        
        if not private_key_path.exists():
            logger.info("Clave SSH no encontrada, generando nuevo par de claves...")
            
            # Generar nuevo par de claves SSH RSA de 4096 bits
            keygen_cmd = [
                "ssh-keygen",
                "-t", "rsa",                    # Tipo de clave: RSA
                "-b", "4096",                   # Tama√±o de clave: 4096 bits
                "-f", str(private_key_path),    # Archivo de salida
                "-N", "",                       # Sin passphrase (vac√≠a)
                "-C", f"cyberscope-forensic@{hostname}"  # Comentario identificativo
            ]
            
            logger.debug(f"Ejecutando: {' '.join(keygen_cmd[:-2])} [PASSPHRASE_HIDDEN]")
            
            result = subprocess.run(
                keygen_cmd,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode != 0:
                logger.error(f"Error generando claves SSH: {result.stderr}")
                return False
            
            # Verificar que las claves se generaron correctamente
            if not private_key_path.exists() or not public_key_path.exists():
                logger.error("Las claves SSH no se generaron correctamente")
                return False
            
            # Establecer permisos correctos para las claves
            private_key_path.chmod(0o600)  # Solo lectura/escritura para el propietario
            public_key_path.chmod(0o644)   # Lectura para todos, escritura para propietario
            
            logger.info("‚úÖ Par de claves SSH generado exitosamente")
        else:
            logger.info("‚úÖ Clave SSH existente encontrada")
        
        # Paso 3: Verificar que sshpass est√° disponible
        if not _check_sshpass_available():
            logger.error("sshpass no est√° disponible en el sistema")
            return False
        
        # Paso 4: Copiar clave p√∫blica al servidor remoto usando ssh-copy-id
        logger.info(f"Copiando clave p√∫blica a {username}@{hostname}:{port}...")
        
        # Construir comando ssh-copy-id con sshpass
        copy_id_cmd = [
            "sshpass", "-p", password,      # Usar sshpass con contrase√±a
            "ssh-copy-id",                  # Comando para copiar clave
            "-o", "StrictHostKeyChecking=no",        # No verificar host key
            "-o", "UserKnownHostsFile=/dev/null",    # No guardar host key
            "-o", "LogLevel=ERROR",                  # Solo mostrar errores
            "-o", f"ConnectTimeout=30",              # Timeout de conexi√≥n
            "-p", str(port),                         # Puerto SSH
            "-i", str(public_key_path),              # Archivo de clave p√∫blica
            f"{username}@{hostname}"                 # Usuario y host destino
        ]
        
        logger.debug(f"Ejecutando ssh-copy-id a {username}@{hostname}:{port}")
        
        result = subprocess.run(
            copy_id_cmd,
            capture_output=True,
            text=True,
            timeout=60  # Timeout m√°s largo para la copia
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Clave SSH copiada exitosamente al servidor remoto")
            
            # Paso 5: Verificar que la clave funciona haciendo un test de conexi√≥n
            if _test_ssh_key_connection(hostname, username, str(private_key_path), port):
                logger.info("‚úÖ Verificaci√≥n de clave SSH exitosa")
                return True
            else:
                logger.warning("‚ö†Ô∏è Clave copiada pero la verificaci√≥n fall√≥")
                return True  # A√∫n consideramos √©xito si se copi√≥
        else:
            logger.error(f"‚ùå Error copiando clave SSH: {result.stderr}")
            
            # Intentar diagnosticar el problema
            _diagnose_ssh_copy_error(result.stderr, hostname, port)
            return False
            
    except subprocess.TimeoutExpired as e:
        logger.error(f"‚è∞ Timeout durante operaci√≥n SSH: {e}")
        return False
    except subprocess.CalledProcessError as e:
        logger.error(f"üí• Error en comando SSH: {e}")
        return False
    except Exception as e:
        logger.error(f"üí• Error inesperado: {e}")
        return False


def _check_sshpass_available() -> bool:
    """
    Verifica si sshpass est√° disponible en el sistema.
    
    Returns:
        bool: True si sshpass est√° disponible, False en caso contrario
    """
    try:
        result = subprocess.run(
            ["which", "sshpass"],
            capture_output=True,
            timeout=10
        )
        available = result.returncode == 0
        
        if available:
            logger.debug("‚úÖ sshpass est√° disponible")
        else:
            logger.error("‚ùå sshpass NO est√° disponible")
            logger.error("Instala sshpass con: apt-get install sshpass")
            
        return available
    except Exception as e:
        logger.error(f"üí• Error verificando sshpass: {e}")
        return False


def _test_ssh_key_connection(hostname: str, username: str, private_key_path: str, port: int) -> bool:
    """
    Prueba la conexi√≥n SSH usando la clave privada generada.
    
    Args:
        hostname (str): Host remoto
        username (str): Usuario SSH
        private_key_path (str): Ruta a la clave privada
        port (int): Puerto SSH
        
    Returns:
        bool: True si la conexi√≥n es exitosa, False en caso contrario
    """
    try:
        logger.debug(f"üîç Probando conexi√≥n SSH con clave a {username}@{hostname}:{port}")
        
        test_cmd = [
            "ssh",
            "-o", "StrictHostKeyChecking=no",
            "-o", "UserKnownHostsFile=/dev/null",
            "-o", "LogLevel=ERROR",
            "-o", "ConnectTimeout=15",
            "-o", "BatchMode=yes",              # No solicitar contrase√±a
            "-o", "PasswordAuthentication=no",  # Solo usar clave
            "-i", private_key_path,             # Clave privada
            "-p", str(port),                    # Puerto
            f"{username}@{hostname}",           # Usuario@host
            "echo 'SSH_KEY_TEST_OK'"            # Comando de prueba
        ]
        
        result = subprocess.run(
            test_cmd,
            capture_output=True,
            text=True,
            timeout=20
        )
        
        if result.returncode == 0 and "SSH_KEY_TEST_OK" in result.stdout:
            logger.debug("‚úÖ Test de conexi√≥n SSH con clave exitoso")
            return True
        else:
            logger.debug(f"‚ö†Ô∏è Test de conexi√≥n SSH fall√≥: {result.stderr}")
            return False
            
    except Exception as e:
        logger.debug(f"üí• Error en test de conexi√≥n SSH: {e}")
        return False


def _diagnose_ssh_copy_error(error_message: str, hostname: str, port: int):
    """
    Diagnostica errores comunes en ssh-copy-id y proporciona sugerencias.
    
    Args:
        error_message (str): Mensaje de error de ssh-copy-id
        hostname (str): Host remoto
        port (int): Puerto SSH
    """
    error_lower = error_message.lower()
    
    logger.error("üîç Diagn√≥stico de error SSH:")
    
    if "permission denied" in error_lower:
        logger.error("  - Credenciales incorrectas o usuario sin permisos SSH")
        logger.error("  - Verificar usuario y contrase√±a")
        
    elif "connection refused" in error_lower:
        logger.error(f"  - Servidor SSH no accesible en {hostname}:{port}")
        logger.error("  - Verificar que el servicio SSH est√© corriendo")
        logger.error("  - Comprobar firewall y conectividad de red")
        
    elif "timeout" in error_lower or "timed out" in error_lower:
        logger.error(f"  - Timeout conectando a {hostname}:{port}")
        logger.error("  - Verificar conectividad de red")
        logger.error("  - El servidor puede estar sobrecargado")
        
    elif "host key verification failed" in error_lower:
        logger.error("  - Problema con verificaci√≥n de host key")
        logger.error("  - Esto no deber√≠a ocurrir con nuestras opciones SSH")
        
    elif "no route to host" in error_lower:
        logger.error(f"  - No hay ruta de red a {hostname}")
        logger.error("  - Verificar conectividad de red y routing")
        
    else:
        logger.error(f"  - Error no reconocido: {error_message}")
        
    # Sugerencias generales
    logger.error("üí° Sugerencias:")
    logger.error(f"  - Probar conexi√≥n manual: ssh {hostname} -p {port}")
    logger.error("  - Verificar que el usuario tenga permisos SSH")
    logger.error("  - Comprobar configuraci√≥n del servidor SSH")


def get_ssh_public_key() -> str:
    """
    Obtiene el contenido de la clave p√∫blica SSH actual.
    
    Returns:
        str: Contenido de la clave p√∫blica o cadena vac√≠a si no existe
    """
    try:
        public_key_path = Path("/root/.ssh/id_rsa.pub")
        
        if public_key_path.exists():
            with open(public_key_path, 'r') as f:
                return f.read().strip()
        else:
            logger.warning("Clave p√∫blica SSH no encontrada")
            return ""
            
    except Exception as e:
        logger.error(f"Error leyendo clave p√∫blica SSH: {e}")
        return ""


def remove_ssh_keys():
    """
    Elimina las claves SSH existentes (√∫til para regenerar).
    
    Returns:
        bool: True si se eliminaron exitosamente, False en caso contrario
    """
    try:
        ssh_dir = Path("/root/.ssh")
        private_key = ssh_dir / "id_rsa"
        public_key = ssh_dir / "id_rsa.pub"
        
        removed = False
        
        if private_key.exists():
            private_key.unlink()
            logger.info("Clave privada SSH eliminada")
            removed = True
            
        if public_key.exists():
            public_key.unlink()
            logger.info("Clave p√∫blica SSH eliminada")
            removed = True
            
        if removed:
            logger.info("‚úÖ Claves SSH eliminadas exitosamente")
        else:
            logger.info("No hab√≠a claves SSH para eliminar")
            
        return True
        
    except Exception as e:
        logger.error(f"Error eliminando claves SSH: {e}")
        return False


# Funci√≥n de utilidad para testing
def test_ssh_key_manager():
    """
    Funci√≥n de prueba para el gestor de claves SSH.
    NO usar en producci√≥n - solo para testing.
    """
    print("üß™ Iniciando test del gestor de claves SSH...")
    
    # Verificar directorio SSH
    ssh_dir = Path("/root/.ssh")
    print(f"üìÅ Directorio SSH: {ssh_dir} (existe: {ssh_dir.exists()})")
    
    # Verificar claves existentes
    private_key = ssh_dir / "id_rsa"
    public_key = ssh_dir / "id_rsa.pub"
    
    print(f"üîë Clave privada: {private_key} (existe: {private_key.exists()})")
    print(f"üîì Clave p√∫blica: {public_key} (existe: {public_key.exists()})")
    
    # Verificar sshpass
    sshpass_available = _check_sshpass_available()
    print(f"üîß sshpass disponible: {sshpass_available}")
    
    if public_key.exists():
        pub_key_content = get_ssh_public_key()
        print(f"üìÑ Contenido clave p√∫blica: {pub_key_content[:50]}...")
    
    print("‚úÖ Test completado")


if __name__ == "__main__":
    # Configurar logging para testing
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # Ejecutar test si se llama directamente
    test_ssh_key_manager()